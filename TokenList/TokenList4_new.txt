DECLARE declare 1
MODULE module 1
ID readArr 1
SEMICOL ; 1
COMMENTMARK ** 2
COMMENTMARK ** 2
DEF << 3
MODULE module 3
ID arraySum 3
ENDDEF >> 3
TAKES takes 4
INPUT input 4
SQBO [ 4
ID list 4
COLON : 4
ARRAY array 4
SQBO [ 4
NUM 1 4
RANGEOP .. 4
NUM 15 4
SQBC ] 4
OF of 4
REAL real 4
COMMA , 4
ID n 4
COLON : 4
INTEGER integer 4
SQBC ] 4
SEMICOL ; 4
RETURNS returns 5
SQBO [ 5
ID sum 5
COLON : 5
REAL real 5
SQBC ] 5
SEMICOL ; 5
START start 6
DECLARE declare 7
ID index 7
COLON : 7
INTEGER integer 7
SEMICOL ; 7
DECLARE declare 8
ID t 8
COLON : 8
BOOLEAN boolean 8
SEMICOL ; 8
ID sum 9
ASSIGNOP := 9
RNUM 0.0 9
SEMICOL ; 9
FOR for 10
BO ( 10
ID index 10
IN in 10
NUM 1 10
RANGEOP .. 10
NUM 15 10
BC ) 10
START start 11
ID t 12
ASSIGNOP := 12
ID index 12
LE <= 12
ID n 12
SEMICOL ; 12
SWITCH switch 13
BO ( 13
ID t 13
BC ) 13
START start 14
CASE case 15
TRUE true 15
COLON : 15
PRINT print 15
BO ( 15
ID list 15
SQBO [ 15
ID index 15
SQBC ] 15
BC ) 15
SEMICOL ; 15
ID sum 16
ASSIGNOP := 16
ID sum 16
PLUS + 16
ID list 16
SQBO [ 16
ID index 16
SQBC ] 16
SEMICOL ; 16
BREAK break 17
SEMICOL ; 17
CASE case 18
FALSE false 18
COLON : 18
PRINT print 18
BO ( 18
ID sum 18
BC ) 18
SEMICOL ; 18
PRINT print 19
BO ( 19
ID index 19
BC ) 19
SEMICOL ; 19
BREAK break 20
SEMICOL ; 20
END end 21
COMMENTMARK ** 22
COMMENTMARK ** 22
END end 23
PRINT print 24
BO ( 24
ID sum 24
BC ) 24
SEMICOL ; 24
END end 25
DRIVERDEF <<< 26
DRIVER driver 26
PROGRAM program 26
DRIVERENDDEF >>> 26
START start 27
DECLARE declare 28
ID A 28
COLON : 28
ARRAY array 28
SQBO [ 28
NUM 1 28
RANGEOP .. 28
NUM 15 28
SQBC ] 28
OF of 28
REAL real 28
SEMICOL ; 28
DECLARE declare 29
ID k 29
COLON : 29
INTEGER integer 29
SEMICOL ; 29
DECLARE declare 30
ID s 30
COLON : 30
REAL real 30
SEMICOL ; 30
GET_VALUE get_value 31
BO ( 31
ID k 31
BC ) 31
SEMICOL ; 31
USE use 32
MODULE module 32
ID readArr 32
WITH with 32
PARAMETERS parameters 32
ID A 32
COMMA , 32
ID k 32
SEMICOL ; 32
SQBO [ 33
ID s 33
SQBC ] 33
ASSIGNOP := 33
USE use 33
MODULE module 33
ID arraySum 33
WITH with 33
PARAMETERS parameters 33
ID A 33
COMMA , 33
ID k 33
SEMICOL ; 33
PRINT print 34
BO ( 34
ID s 34
BC ) 34
SEMICOL ; 34
END end 35
COMMENTMARK ** 37
COMMENTMARK ** 37
COMMENTMARK ** 38
COMMENTMARK ** 38
COMMENTMARK ** 39
COMMENTMARK ** 39
COMMENTMARK ** 40
COMMENTMARK ** 40
DEF << 42
MODULE module 42
ID readArr 42
ENDDEF >> 42
TAKES takes 43
INPUT input 43
SQBO [ 43
ID arr1 43
COLON : 43
ARRAY array 43
SQBO [ 43
NUM 1 43
RANGEOP .. 43
NUM 15 43
SQBC ] 43
OF of 43
REAL real 43
COMMA , 43
ID k 43
COLON : 43
INTEGER integer 43
SQBC ] 43
SEMICOL ; 43
START start 44
DECLARE declare 45
ID tempvar 45
COLON : 45
REAL real 45
SEMICOL ; 45
DECLARE declare 46
ID i 46
COLON : 46
INTEGER integer 46
SEMICOL ; 46
ID i 47
ASSIGNOP := 47
NUM 1 47
SEMICOL ; 47
WHILE while 48
BO ( 48
ID i 48
LE <= 48
ID k 48
BC ) 48
START start 49
GET_VALUE get_value 50
BO ( 50
ID tempvar 50
BC ) 50
SEMICOL ; 50
ID arr1 51
SQBO [ 51
ID i 51
SQBC ] 51
ASSIGNOP := 51
ID tempvar 51
SEMICOL ; 51
ID i 52
ASSIGNOP := 52
ID i 52
PLUS + 52
NUM 1 52
SEMICOL ; 52
COMMENTMARK ** 53
COMMENTMARK ** 53
END end 54
END end 55
